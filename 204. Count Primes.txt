int countPrimes(int n) {
    if(--n < 2) return 0;
    int m = (n + 1)/2, count = m, k, u = (sqrt(n) - 1)/2;
    bool notPrime[m] = {0};
    
    for(int i = 1; i <= u;i++)
        if(!notPrime[i])
          for(k = (i+ 1)*2*i; k < m;k += i*2 + 1)
              if (!notPrime[k])
              {
                  notPrime[k] = true;
                  count--;
              }
    return count;
}



public class Solution {
public int countPrimes(int n) {
	
	if( n <=2) {
		return 0;
	}
	
	int c= 1;
	
	boolean isNotPrime[] = new boolean[n+1];
	
	
	
	for(int i=3;i*i<=n;i=i+2) {
		
		if(isNotPrime[i]) {
			
			continue;
		}
		
		for(int j= i*i ;j<=n;j=j+2*i) {
			isNotPrime[j] = true;
		} 
        			
	}
    
	for(int i =3;i<n;i=i+2){
		
		
		if(!isNotPrime[i]) {
			c++;
		}
	}
	return c;
	
}
}






class Solution {
public:
    int countPrimes(int n) {
        if (n <= 2) return 0;
        double c = sqrt(n);
        bool *bv = new bool[n];
        for(int i = 3; i <= c; i += 2)
            if (!bv[i]) 
                for(int j = i*i, k = i << 1; j < n; j += k)
                    bv[j] = 1;
        int num = 1;
        for(int i = 3; i < n; i += 2)
            if(!bv[i]) num++;
        return num;
    }
};



class Solution {
public:
    int countPrimes(int n) {
        //Sieve of Erantothoses
        vector<bool> check(n+1,true); 

      //Because 0 and 1 are not primes
      check[0]=false;
      check[1]=false;

      //OPtimization 2: Do only till rootn since all numbers after that are handled
      //The remaining values are already true
      for(int i=2;i*i<=n;i++) 
      {
        //If already visited
        if(check[i]==false) continue;

        //Optimation 1 : 3*2 is already handled by 2*3. Toh directly start from 9
        int j=i*i;
        while(j<=n) 
        {
            check[j]=false;
            j = j+i;
        }

      }

    int count=0;
    //Checking all the numbers which are prime (less than n)
      for(int i=1;i<n;i++)
        if(check[i]) count++;
        
        return count;
    }
};