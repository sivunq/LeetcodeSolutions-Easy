class Solution {
public:
    int climbStairs(int n) {
        int stairs[n+1];
        stairs[0]=1;
        stairs[1]=2;
        
        for(int i=2;i<n;i++)
            stairs[i]=stairs[i-1]+stairs[i-2];
        
        return stairs[n-1];
        
    }
};



int climbStairs(int n) {
        if (n == 1) {
            return 1;
        }
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
	


int climbStairs(int n) {
    n++;
    double phi = (1 + pow(5, 0.5)) / 2;
    return round(pow(phi, n) / pow(5, 0.5));
}


class Solution {
public:
    int climbStairs(int n) {
        int StepOne = 1;
        int StepTwo = 0;
        int ret = 0;
        for(int i=0;i<n;i++)
        {
            ret = StepOne + StepTwo;
            StepTwo = StepOne;
            StepOne = ret;
        }
        return ret;
    }
};