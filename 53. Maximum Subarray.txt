class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sumMax=nums[0],curSum=nums[0];
        
        for(int i=1; i<nums.size(); i++ ){
            curSum=max(nums[i], curSum+nums[i]);
            sumMax=max(sumMax,curSum);
        }
        
        return sumMax;
        
    }
};


/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
   let max_so_far = nums[0]; 
   let curr_max = nums[0]; 
  
   for (let i = 1; i < nums.length; i++) 
   { 
        curr_max = Math.max(nums[i], curr_max+nums[i]); 
        max_so_far = Math.max(max_so_far, curr_max); 
   } 
   return max_so_far;
    
};


//js
int maxSubArraySum(int a[], int size) 
{ 
    int max_so_far = INT_MIN, max_ending_here = 0; 
  
    for (int i = 0; i < size; i++) 
    { 
        max_ending_here = max_ending_here + a[i]; 
        if (max_so_far < max_ending_here) 
            max_so_far = max_ending_here; 
  
        if (max_ending_here < 0) 
            max_ending_here = 0; 
    } 
    return max_so_far; 
}