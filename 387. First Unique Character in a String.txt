class Solution {
public:
    int firstUniqChar(string s) {
        int hash[26]={0};
        unordered_map<char, int> hash;
        int first;
        
        for(int i=0;i<s.length();i++){
            hash[s[i]-97]++;   
        }
        for(int i=0;i<s.length();i++){
            if(hash[s[i]-97]==1)return i;   
        }
        
        return -1;
    }
};


if the string is extremely long, we wouldn't want to traverse it twice, so instead only storing just counts of a char, we also store the index, and then traverse the hash table.

class Solution {
public:
    int firstUniqChar(string s) {
        unordered_map<char, pair<int, int>> m;
        int idx = s.size();
        for (int i = 0; i < s.size(); i++) {
            m[s[i]].first++;
            m[s[i]].second = i;
        }
        for (auto &p : m) {
            if (p.second.first == 1) idx = min(idx, p.second.second);
        }
        return idx == s.size() ? -1 : idx;
    }
};